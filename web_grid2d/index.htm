<html>
<head>
    <style>
        body {
            font-family: tahoma;
        }
    </style>
</head>
<body>
    <h1> FLOAT GRID 2D SOLVING USING RECTANGLE GRAPH NODES </h1>
    <h2> Author </h2>
    Leonard Kevin McGuire Jr (kmcg3413@gmail.com)

    <h2> Implementation </h2>


    <p>This is a short informal paper on the solving of a 2D float grid using
    rectangle shaped graph nodes. In this paper we will be showing how one
    can solve this pathing problem using the rectangle technique. This can
    be extended to 3D problem also, but 2D was more simple to begin with.</p>

    <h3> Passable Map </h3>
    
    <p>The black represents inpassable areas. The white is passable. It has been
    scaled and aliased but each black dot is actually a single pixel. But, it
    looks nice like this and is easy on the eyes to trace paths through the clutter
    of what I like to think of as mountains.</p>
    
    <img src="passable.png"/>

    <h3> Path Map </h3>
    <p>This is the path map which represents the paths created using the rectangular
    graph nodes. The rectangular graph node creation is discussed further below, but
    as you can see this presents a much simplier problem to solve when trying to find
    a path. You however still need to solve the problem in more detail for it to be
    actually usable but that can be done progressively in real time if desired by simply
    using the less detailed rectangular graph to plot the coarse path.</p>
    
    <img src="graph_scaled.png"/>

    <h3> Algorithm Details </h3>

    <p>To achieve the path map result our first step is to fill the map with rectangles, and
    inside each rectangle can <i>only</i> be passable area. You must fill the entire map.
    The algorithm used to fill the map with rectangles (or maybe any convex polygon) can
    likely be improved and could result in reduced graph node counts which will result in
    higher performance.</p>

    <p>To fill with rectangles I start at the top left corner (0, 0). I then check if that point
    is valid and if so I see how far right I can move. Once I reach the furthest point I then
    try to expand the rectangle down until I reach an existing rectangle or an impassable point.
    If I am on an impassable point then I just keep moving to the right (+1, 0). Once I reach 
    the end of the current row I moved down to the next column (0, +1). This is inefficient in
    a way because some rectangles may have extended fairly far below and I will likely end up
    moving over them, but it is a very simple and working technique.</p>

    <p>Once all the rectangles have been formed I then go through each rectangle and find adjacent
    rectangles. These are added as adjacent. This causes me to start to form a graph. I call it
    a single graph but in reality it may form multiple graphs because some regions of a grid may
    be inaccessible from each other.</p>

    <p>It should be noted that it may be possible to build lower resolution graphs from this basic
    rectangle graph which could allow faster detection of a path and quicker response time in 
    not getting a path built but starting to build a path. For example the software could initially
    get a rough path then in real-time it could build the path as the path is being used. Of course
    unbuilt parts of the path would be unusable, but for something moving along the path your could
    essentially stay ahead of what was moving because you can be certain the path exists its just that all the exact moves along the path are still undecided.</p>

    <h3> Python Code Demonstration </h3>
    <h4> grid2d.py </h4>
    </p>
    <pre>
'''
    2D GRID PATH FROM START TO FINISH

    To solve the problem we must path a valid path from start to
    finish and it shall be the shortest path possible.

    The first step to finding an optimal solution is to reduce the
    problem by removing excess elements from the computation. To do
    that we reduce it from a pixel grid to a graph. 

    The graph represents larger sections containing one or more pixels 
    per node. We then find a solution for the graph which represents a 
    solution for the grid.

    The graph is a more efficient form as well because it contains pointers
    to the next node that require no offset calculations which would be required
    if using the grid (to access an adjacent pixel). For example to determine
    which directions we can go from a single pixel we first need to compute the
    offset of each adjacent pixel then read that pixel value and finally determine
    if it is valid then choose it. For the graph we simply iterate the adjacent nodes
    and need no checks as they were pre-validated. 

    One could imagine the graph as a graph of pixels which links to other pixels 
    that are adjacent, except one shall also have to consider the graph more 
    optimized (less graph nodes than pixels).

    The ratio of pixels:graph-nodes lessens when the grid becomes difficult to navigate
    whereby there are more invalid pixels (pixels that can not be traveled on). This is
    because a graph node repsents a rectangle of passable space. So by having smaller
    passable spaces the number of graph nodes approaches the number of valid pixels, but
    in larger more open areas the ratio can be high as 1:52 or almost 1:1. It shall never
    be lower than 1:1 which is essentially a worst case and likely non-realistic grid.



'''
import array
import math
import random

from tgaimage import TGAImage

def grid_fillrect(grid, w, h, rect, val):
        sx, sy, ex, ey = rect
        for y in range(sy, ey):
            for x in range(sx, ex):
                grid[y * w + x] = val

def solve(grid, w, h, toohigh, start, end):
    # build rectangle portals across grid
    rportals = []

    UNUSED = 1000000
    used = array.array('I', (UNUSED for x in range(0, w * h)))

    y = 0
    ri = 0
    while y < w:
        x = 0
        while x < h:
            # is valid point?
            if grid[y * w + x] < toohigh and used[y * w + x] == UNUSED:
                # find right most point
                for nx in range(x, w):
                    if grid[y * w + nx] >= toohigh or used[y * w + nx] != UNUSED:
                        nx = nx - 1
                        break
                nx = nx + 1
                # see how tall we can make it
                for ny in range(y, h):
                    for _x in range(x, nx):
                        if grid[ny * w + _x] >= toohigh or used[ny * w + _x] != UNUSED:
                            _x = _x - 1
                            break
                    _x = _x + 1

                    if _x < nx:
                        break
                # create rect
                rect = (x, y, nx, ny)
                # gill area and mark rect's index in rportals
                # we will use this later when building an actual
                # graph of the portals
                #grid_fillrect(used, w, h, rect, len(rportals))
                for __y in range(y, ny):
                    for __x in range(x, nx):
                        used[__y * w + __x] = len(rportals)


                rportals.append(rect)
                x = nx
            else:
                x = x + 1
        y = y + 1
    # go through and build what other rect portals are accessible from
    # each rect portal
    graph = []
    for rpi in range(0, len(rportals)):
        rect = rportals[rpi]
        # break out components
        sx, sy, ex, ey = rect
        # go around border looking for other portals
        bportals = set()
        if sy - 1 > -1:
            for x in range(sx, ex):
                i = used[(sy - 1) * w + x]
                if i != UNUSED:
                    bportals.add(i)
        if ey < h:
            for x in range(sx, ex):
                i = used[ey * w + x]
                if i != UNUSED:
                    bportals.add(i)
        if sx - 1 > -1:
            for y in range(sy, ey):
                i = used[y * w + (sx - 1)]
                if i != UNUSED:
                    bportals.add(i)
        if ex < w:
            for y in range(sy, ey):
                i = used[y * w + ex]
                if i != UNUSED:
                    bportals.add(i)
        # we now have all the portals that are adjacent
        node = [rect, bportals]
        graph.append(node)

    # go through and optimize graph to include a direct
    # link to the border node instead of using an index
    for gni in range(0, len(graph)):
        gn = graph[gni]

        bportals = gn[1]
        _bportals = list()
        for bp in bportals:
            _bportals.append(graph[bp])
        gn[1] = _bportals

    # our graph is now complete and usable

    tga = TGAImage(w, h)
    # first render impassable areas
    ivp = 0
    for y in range(0, h):
        for x in range(0, w):
            if grid[y * w + x] >= toohigh:
                tga.put(x, y, (0, 0, 0))
                ivp = ivp + 1
    tga.save('passable.tga')

    tga = TGAImage(w, h, 3)
    # first render impassable areas
    ivp = 0
    for y in range(0, h):
        for x in range(0, w):
            if grid[y * w + x] >= toohigh:
                tga.putscaled(x, y, (190, 190, 190))
                ivp = ivp + 1

    pc = len(grid) - ivp
    print('portals', len(graph))
    print('valid-pixels', pc)
    print('speed-factor', pc / len(graph))

    colors = (
        (0, 170, 0),
        (0, 90, 170)
    )
    ci = 0
    rc = 0
    # go through and color and mark portals and links
    for gn in graph:
        rect = gn[0]          # our rect
        bnodes = gn[1]        # our border nodes

        sx, sy, ex, ey = rect
        # calculate our center
        cx = sx + ((ex - sx) // 2)
        cy = sy + ((ey - sy) // 2)

        # iterate through border nodes
        rc = (rc + 40) & 0xff
        for bn in bnodes:
            bsx, bsy, bex, bey = bn[0]
            bcx = bsx + ((bex - bsx) // 2)
            bcy = bsy + ((bey - bsy) // 2)            
            # draw line denoting connection (portal)
            tga.putline(cx, cy, bcx, bcy, (rc, 90, 90))

    tga.save('graph_scaled.tga')

def main():
    w = int(math.sqrt(100 * 100))
    h = w

    # create the grid with random values
    random.seed(1029382)
    grid = array.array('f', (random.random() for x in range(0, int(w*h))))

    solve(grid, w, h, 0.8, None, None)

main()
    </pre>
    <h4> tgaimage.py </h4>
    <pre>
'''
    This is one of the most simpliest image formats out there, and it is
    very useful to have it handy to quickly and easily dump out data in
    an image format.

    I copied the code mostly from the internet but made it into a class
    as a nicer package and so you can handle multiple images at once instead
    of using globals like the original author did.

    You can also continue to change it even after you write it out!
'''

import struct
import array
import math

def drange(s, e, step = 1):
    if s > e:
        # decrement mode
        return range(s, e, step * -1)
    # increment mode
    return range(s, e, step)

def swap2(x, y):
    return y, x

class TGAImage:
    def __init__(self, width, height, scale = 1):
        self.scale = scale
        self.w = width * scale
        self.h = height * scale
        self.offset = 0
        self.colortype = 0
        self.imagetype = 2
        self.palettestart = 0
        self.palettelen = 0
        self.palbits = 8
        self.xorigin = 0
        self.yorigin = 0
        self.bpp = 24
        self.orientation = 0
        self.data = array.array('B', (255 for i in range(self.w * self.h * 3 * self.scale)))
    def put(self, x, y, rgb):
        x = x * self.scale
        y = y * self.scale
        self.putnoscale(x, y, rgb)
    def putscaled(self, x, y, rgb):
        x = x * self.scale
        y = y * self.scale
        for _y in range(0, self.scale):
            for _x in range(0, self.scale):
                self.putnoscale(x + _x, y + _y, rgb)
    def putnoscale(self, x, y, rgb):
        y = (self.h - 1) - y
        self.data[(y * self.w + x) * 3 + 0] = rgb[2]
        self.data[(y * self.w + x) * 3 + 1] = rgb[1]
        self.data[(y * self.w + x) * 3 + 2] = rgb[0]
    def putline(self, x0, y0, x1, y1, color):
        x0 = x0 * self.scale
        y0 = y0 * self.scale
        x1 = x1 * self.scale
        y1 = y1 * self.scale

        steep = abs(y1 - y0) > abs(x1 - x0)

        if steep:
            x0, y0 = swap2(x0, y0)
            x1, y1 = swap2(x1, y1)
        if x0 > x1:
            x0, x1 = swap2(x0, x1)
            y0, y1 = swap2(y0, y1)

        dX = x1 - x0
        dY = abs(y1 - y0)
        err = dX // 2
        if y0 < y1:
            ystep = 1
        else:
            ystep = -1
        y = y0

        for x in range(x0, x1):
            if steep:
                self.putnoscale(y, x, color)
            else:
                self.putnoscale(x, y, color)
            err = err - dY
            if err < 0:
                y += ystep
                err += dX
    def save(self, path):
        fo = open(path, 'wb')
        header = struct.pack(
            '&lt;BBBHHBHHHHBB',
            self.offset, self.colortype, self.imagetype,
            self.palettestart, self.palettelen, self.palbits,
            self.xorigin, self.yorigin, self.w, self.h, self.bpp,
            self.orientation
        )
        fo.write(header)
        fo.write(self.data.tobytes())
        fo.close()
    def drawpoints(self, points):
        ml = 0.0
        mr = 0.0
        mt = 0.0
        mb = 0.0
        # establish boundary
        for point in points:
            if point[0] > mr:
                mr = point[0]
            if point[0] < ml:
                ml = point[0]
            if point[1] > mt:
                mt = point[1]
            if point[1] < mb:
                mb = point[1]
        # render pixels for points
        mr = mr + -ml
        mt = mt + -mb
        for point in points:
            x = point[0]
            y = point[1]
            x = x + -ml             # adjust back to left
            y = y + -mb             # adjust back to bottom
            x = (x / mr) * (self.w - 1)   # scale to width
            y = (y / mt) * (self.h - 1)   # scale to height
            self.put(int(x), int(y), (90, 170, 90))
    </pre>
</body>
</html>